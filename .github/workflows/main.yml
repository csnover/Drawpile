name: Build and Test

on: [pull_request, push]

env:
  CARGO_TERM_COLOR: always
  CMAKE_COLOR_DIAGNOSTICS: ON
  CLICOLOR_FORCE: 1

jobs:
  lint:
    name: Lint Rust
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Check formatting
        run: cargo fmt -- --check
      - name: Run clippy
        run: cargo clippy --all-targets -- -D warnings

  test:
    name: Test Qt ${{ matrix.qt }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        libsodium: [ 1.0.18 ]
        qt: [ 5.15.8, 6.4.2 ]
        qtkeychain: [ c6f0b66318f8da6917fb4681103f7303b1836194 ]
        libmicrohttpd: [ 0.9.75 ]
        include:
          - os: ubuntu-latest
            sccache_tuple: x86_64-unknown-linux-musl
            qt_packages: >
              sudo apt-get update &&
              sudo apt-get install --no-install-recommends
              libgl1-mesa-dev libglu1-mesa-dev libxi-dev
              libxext-dev libxfixes-dev libxrender-dev
              libxcb1-dev libx11-xcb-dev libxcb-glx0-dev libxcb-util0-dev
              libxkbcommon-dev libxcb-keysyms1-dev
              libxcb-image0-dev libxcb-shm0-dev libxcb-icccm4-dev
              libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev
              libxcb-randr0-dev libxcb-render-util0-dev libxcb-xinerama0-dev
              libxcb-xkb-dev libxcb-xinput-dev libclang-13-dev
            # libgl1-mesa-dev only absolutely required for Qt6 with OpenGL
            build_packages: >
              sudo apt-get update &&
              sudo apt-get install --no-install-recommends libgl1-mesa-dev libsystemd-dev
            build_flags: -DINITSYS=systemd
          - os: windows-latest
            sccache_tuple: x86_64-pc-windows-msvc
            other_deps_flags: >-
              "-DCMAKE_VS_MSBUILD_COMMAND=$(
              vswhere -latest -requires Microsoft.Component.MSBuild
              -find MSBuild\\**\\Bin\\amd64\\MSBuild.exe | select-object -first 1
              )"
            build_flags: -G Ninja
          - os: windows-latest
            qt: 5.15.8
            qt_packages: >
              choco install gperf jom openssl winflexbison3 &&
              (echo "INCLUDE=${env:INCLUDE};C:\Program Files\OpenSSL-Win64\include" >> $env:GITHUB_ENV) &&
              (echo "LIB=${env:LIB};C:\Program Files\OpenSSL-Win64\lib" >> $env:GITHUB_ENV) &&
              New-Item -Path C:\ProgramData\Chocolatey\bin\flex.exe -ItemType SymbolicLink -Value C:\ProgramData\Chocolatey\bin\win_flex.exe &&
              New-Item -Path C:\ProgramData\Chocolatey\bin\bison.exe -ItemType SymbolicLink -Value C:\ProgramData\Chocolatey\bin\win_bison.exe
          - os: macos-latest
            sccache_tuple: x86_64-apple-darwin
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # for git-describe
          submodules: true
      - name: Activate MSVC
        uses: ilammy/msvc-dev-cmd@v1
        if: runner.os == 'Windows'

      - name: Restore Qt from cache
        uses: actions/cache/restore@v3
        id: deps-qt-cache
        with:
          path: .github/deps/qt
          key: qt-${{ runner.os }}-${{ matrix.qt }}
      - name: Install Qt system dependencies
        run: ${{ matrix.qt_packages }}
        if: matrix.qt_packages && steps.deps-qt-cache.outputs.cache-hit != 'true'
      - name: Build Qt from source
        run: >
          cmake
          -DBUILD_TYPE=Release
          "-DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/.github/deps/qt"
          "-DQT_VERSION=${{ matrix.qt }}"
          -P .github/scripts/build-qt.cmake
        working-directory: ${{ env.RUNNER_TEMP }}
        if: steps.deps-qt-cache.outputs.cache-hit != 'true'
      - name: Store Qt to cache
        uses: actions/cache/save@v3
        if: steps.deps-qt-cache.outputs.cache-hit != 'true'
        with:
          path: .github/deps/qt
          key: qt-${{ runner.os }}-${{ matrix.qt }}
      - name: Activate Qt
        run: echo "${{ github.workspace }}/.github/deps/qt/bin" >> $GITHUB_PATH
        shell: bash

      - name: Restore other dependencies from cache
        uses: actions/cache/restore@v3
        id: deps-other-cache
        with:
          path: .github/deps/other
          key: other-${{ runner.os }}-${{ matrix.libmicrohttpd }}-${{ matrix.libsodium }}-${{ matrix.qtkeychain }}-${{ matrix.qt }}
      - name: Build other dependencies from source
        run: >
          cmake
          "-DLIBMICROHTTPD=${{ matrix.libmicrohttpd }}"
          "-DLIBSODIUM=${{ matrix.libsodium }}"
          "-DQTKEYCHAIN=${{ matrix.qtkeychain }}"
          "-DCMAKE_PREFIX_PATH=${{ github.workspace }}/.github/deps/qt"
          "-DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/.github/deps/other"
          ${{ matrix.other_deps_flags }}
          -P "${{ github.workspace }}/.github/scripts/build-other.cmake"
        working-directory: ${{ env.RUNNER_TEMP }}
        if: steps.deps-other-cache.outputs.cache-hit != 'true'
      - name: Store other dependencies to cache
        uses: actions/cache/save@v3
        if: steps.deps-other-cache.outputs.cache-hit != 'true'
        with:
          path: .github/deps/other
          key: other-${{ runner.os }}-${{ matrix.libmicrohttpd }}-${{ matrix.libsodium }}-${{ matrix.qtkeychain }}-${{ matrix.qt }}

      - name: Restore Rust build artefacts from cache
        uses: actions/cache/restore@v3
        id: rust-deps-cache
        with:
          path: build/cargo/relwithdebinfo/deps
          key: rust-deps-${{ runner.os }}-${{ hashFiles('Cargo.lock') }}

      - name: Save/restore Cargo database from cache
        uses: actions/cache@v3
        id: cargo-cache
        with:
          path: |-
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: cargo-${{ runner.os }}-${{ hashFiles('Cargo.lock') }}
      - name: Install Cargo database
        if: steps.cargo-cache.outputs.cache-hit != 'true'
        run: bash .github/scripts/init-cargo.sh
      - name: Use Cargo from cache
        if: steps.cargo-cache.outputs.cache-hit == 'true'
        run: echo "CARGO_NET_OFFLINE=1" >> $GITHUB_ENV
        shell: bash

      - name: Restore sccache
        uses: actions/cache/restore@v3
        id: sccache
        with:
          path: .github/sccache
          key: sccache-${{ runner.os }}
      - name: Install sccache
        if: steps.sccache.outputs.cache-hit != 'true'
        run: bash .github/scripts/install-sccache.sh 0.3.3 ${{ matrix.sccache_tuple }}
      - name: Activate sccache
        run: echo "${{ github.workspace }}/.github/sccache/bin" >> $GITHUB_PATH
        shell: bash

      - name: Install system dependencies
        run: ${{ matrix.build_packages }}
        if: matrix.build_packages
      - name: Generate project
        run: >
          cmake -S . -B build --log-level=VERBOSE -DCMAKE_BUILD_TYPE=RelWithDebInfo
          -DCMAKE_C_COMPILER_LAUNCHER=sccache
          -DCMAKE_CXX_COMPILER_LAUNCHER=sccache
          -DCLIENT=on -DSERVER=on -DSERVERGUI=on -DTOOLS=on -DTESTS=on
          ${{ matrix.build_flags }}
          "-DCMAKE_PREFIX_PATH=${{ github.workspace }}/.github/deps/qt;${{ github.workspace }}/.github/deps/other"
      - name: Build project
        run: cmake --build build --parallel $(nproc || sysctl -n hw.ncpu || echo 2) --config RelWithDebInfo
        env:
          RUSTC_WRAPPER: sccache
          SCCACHE_CACHE_SIZE: 400M
          SCCACHE_DIR: ${{ github.workspace }}/.github/sccache/cache

      - name: Run C++ tests
        run: ctest -C RelWithDebInfo --output-on-failure
        working-directory: build

      - name: Run Rust tests
        run: cargo test --target-dir build/cargo --profile relwithdebinfo
        env:
          RUSTC_WRAPPER: sccache
          SCCACHE_CACHE_SIZE: 400M
          SCCACHE_DIR: ${{ github.workspace }}/.github/sccache/cache

      - name: Evict sccache from cache
        if: (success() || failure()) && steps.sccache.outputs.cache-hit == 'true'
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh extension install actions/gh-actions-cache || true
          gh actions-cache delete "sccache-${{ runner.os }}" --confirm
        continue-on-error: true

      - name: Save sccache
        if: success() || failure()
        uses: actions/cache/save@v3
        with:
          path: .github/sccache
          key: sccache-${{ runner.os }}
        continue-on-error: true

      - name: sccache stats
        run: sccache --show-stats
        continue-on-error: true

      - name: Evict Rust build artefacts from cache
        if: (success() || failure()) && steps.rust-deps-cache.outputs.cache-hit == 'true'
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh extension install actions/gh-actions-cache || true
          gh actions-cache delete "rust-deps-${{ runner.os }}-${{ hashFiles('Cargo.lock') }}" --confirm
        continue-on-error: true

      - name: Save Rust build artefacts to cache
        if: success() || failure()
        uses: actions/cache/save@v3
        with:
          path: build/cargo/relwithdebinfo/deps
          key: rust-deps-${{ runner.os }}-${{ hashFiles('Cargo.lock') }}
        continue-on-error: true
